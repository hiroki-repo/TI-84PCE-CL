#packopt orgpath 1
/*

HSP??R?[???o?b?N???W???[??
HSP3.5 beta 3?????m?F
?p?u???b?N?h???C?????
CC0 1.0????C?Z???X?????(CC0??R?????Y?????? http://creativecommons.org/publicdomain/zero/1.0/deed.ja)


?R?[???o?b?N??????
makeclbkfunc p1,p2,3,p4
p1=?????              ?R?[???o?b?N??????K?v??????n???????|?C???^(?T?u???[?`???????R?[???o?b?N??????|?C???^)????????
p2=0~(0)               ?n????????????? (p2<=0???????????????)
p3=???x????            ?R?[???o?b?N????????????T?u???[?`??????x??
p4=0|1(0)              ??яo???K????? 0=stdcall 1=cdecl   p4??????????stdcall??????

??????????????? (p2<=0) ??A??яo?????? lparam=NULL?A wparam=0 ??????
????????????     (p2>0)  ??A??яo?????? lparam=???????o?b?t?@?A?h???X?A wparam=?????????? ??????
?????????????m??G???[??? ??A??яo?????? lparam=NULL?A wparam=0 ??????

?T?u???[?`???????????????? stat ????l???R?[???o?b?N????????l??????

?????o?b?t?@??T?u???[?`?????????????????? (lparam?Awparam??l??ρE???????)
argclbkfunc ??????????擾??????A?????????????K?v??????Awparam?Alparam??l??j????????????


lparam??wparam????????????擾
argclbkfunc p1
p1=?z??              ?????????擾???????^?z??

?????????????^?z?????? p1 ?????????? (?????o?b?t?@????R?s?[??????)
?R?[???o?b?N????????????T?u???[?`??????g?p???????????
wparam ?? lparam ???擾?O??j???????????????яo?????????g?p???????????
lparam ?? wparam ??`?F?b?N??s???????

*/




//???W???[??
//-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|//
#ifndef _modulemakeclbkfuncah_def_
#define _modulemakeclbkfuncah_def_
#module

	#uselib "kernel32.dll"
	#func VirtualProtect "VirtualProtect" sptr,int,int,var

	#const  FUNCSIZE     22         //?}?V????????
	#const  FUNCSIZEBYT  FUNCSIZE*4 //?}?V????????(?o?C?g)

	#const  PAGE_EXECUTE_READWRITE  $00000040

	#deffunc makeclbkfunc var p_bin, int numargs, label label_sub, int clmode,\
	local hspctx,\
	local int_numargs,\
	local lbl_tmp,\
	local int_tmp,\
	local bin,\
	local int_stat

		lbl_tmp = label_sub  //?T?u???[?`?????x??
		mref hspctx,68
		int_numargs = numargs & $80003FFF
		int_stat=stat        //stat????

		//?e?[?u??????????m??
		static_arr_str_bin(static_int_idx) = "" // ????? / ?v?f???
		memexpand static_arr_str_bin(static_int_idx), FUNCSIZEBYT
		p_bin = varptr(static_arr_str_bin(static_int_idx))

		//?}?V????
		dupptr bin, p_bin, FUNCSIZEBYT
		bin(0)  = $BE56C031       , varptr(hspctx(9)), $B9044689, int_numargs , $8D530689
		bin(5)  = $0000989E       , $7EC98500        , $E1C1511C, $13FF5102   , $04468959
		bin(10) = $74C08559       , $FF0E890C        , $8F088C74, $E2FC8844   , $68C689F6
		bin(15) = lpeek(lbl_tmp,0), $581C53FF        , $0574F685, $0453ff56   , $54838B58
		bin(20) = $5B000002       , $0000C35E
		if clmode==0 & int_numargs>0{
			bin(FUNCSIZE-1) = $C25E | int_numargs << 18  //stdcall????????????????X?^?b?N????
		}

		static_int_idx++
		VirtualProtect p_bin, FUNCSIZEBYT, PAGE_EXECUTE_READWRITE, int_tmp
		return int_stat


	#deffunc argclbkfunc array arr_int_args,\
	local cln_arr_int_tmp

		dupptr cln_arr_int_tmp, lparam, wparam*4
		dim arr_int_args, wparam
		memcpy arr_int_args, cln_arr_int_tmp, wparam*4
		return

#global

#endif

#module
#deffunc setcs4dsv var prm_0
cs=0
repeat varsize(prm_0)-2-55:cs+=peek(prm_0,cnt+55):loop
wpoke prm_0,varsize(prm_0)-2,cs
return
#defcfunc IsTI84PCEPrgm var prm_0
return peek(prm_0,0x4a)

#defcfunc GetTI84PCEPrgmType var prm_0
switch peek(prm_0,0x4b)
case 0x7b
return "Asm"
swbreak
swend
return "Unk"

#defcfunc vramformattrans int prm_0
prm_0x=prm_0
if ((wpeek(memory@,0xe30018)>>10)&1){prm_0x=((peek(prm_0x,1)&0xFF)<<(8*0))|((peek(prm_0x,0)&0xFF)<<(8*1))}
if ((wpeek(memory@,0xe30018)>>8)&1){prm_0x=((prm_0x>>(5*2))<<(5*0))|((prm_0x>>(5*1))<<(5*1))|((prm_0x>>(5*0))<<(5*2))}
return prm_0x

#deffunc SetTitleFromPrgm var prm_0
sdim titlename4show,64
memcpy titlename4show,prm_0,8,0,0x3c
title titlename4show
return

#defcfunc peek24 var prm_0,int prm_1
return (lpeek(prm_0,prm_1)&0xFFFFFF)
#deffunc poke24 var prm_0,int prm_1,int prm_2
poke prm_0,prm_1+0,(prm_2>>(8*0))&0xFF
poke prm_0,prm_1+1,(prm_2>>(8*1))&0xFF
poke prm_0,prm_1+2,(prm_2>>(8*2))&0xFF
return

#global

endflagofprogram=0

#include "eZ80.as"
//#include "emulooper.as"
#include "vpaging.as"

#ifdef _debug
bootromimg=""+dir_cur+"\\firmware.bin"
#else
bootromimg=""+dir_exe+"\\firmware.bin"
#endif

sdim memory,0x1000000
lpoke memory,0xE30010,0xd40000

lpoke memory,0xe30000,0x1F0A0338
lpoke memory,0xe30004,0x0402093F
lpoke memory,0xe30018,0x0000092D


dim vramszbakxy,2

gosub *initializevram

gosub *cpyvramtomem

exist bootromimg
if strsize=-1{
pointertosetinit=0
}else{
pointertosetinit=0x500000
}

poke memory,1+pointertosetinit,0xed
poke memory,2+pointertosetinit,0x7d
starttouscode=3
poke memory,0+pointertosetinit+starttouscode,0x5b
poke memory,1+pointertosetinit+starttouscode,0x31
lpoke memory,2+pointertosetinit+starttouscode,0xD1A87E+3
starttouscode=8
poke memory,0+pointertosetinit+starttouscode,0x5b
poke memory,1+pointertosetinit+starttouscode,0xc3
lpoke memory,2+pointertosetinit+starttouscode,13+pointertosetinit
poke memory,13+pointertosetinit,0x3e
poke memory,14+pointertosetinit,0xd0
poke memory,15+pointertosetinit,0xed
poke memory,16+pointertosetinit,0x6d
starttouscode=17
poke memory,0+pointertosetinit+starttouscode,0xcd
lpoke memory,1+pointertosetinit+starttouscode,0xD1A881
poke memory,21+pointertosetinit,0xed
poke memory,22+pointertosetinit,0x38
poke memory,23+pointertosetinit,0xe6
pcodeoftrc=0x400000
poke memory,0+pcodeoftrc,0xed
poke memory,1+pcodeoftrc,0x43
lpoke memory,2+pcodeoftrc,0xd80000

poke memory,5+pcodeoftrc,0xed
poke memory,6+pcodeoftrc,0x53
lpoke memory,7+pcodeoftrc,0xd80003

poke memory,10+pcodeoftrc,0x22
lpoke memory,11+pcodeoftrc,0xd80006

poke memory,14+pcodeoftrc,0xf5
poke memory,15+pcodeoftrc,0xe1
poke memory,16+pcodeoftrc,0x22
lpoke memory,17+pcodeoftrc,0xd80009

poke memory,20+pcodeoftrc,0xed
poke memory,21+pcodeoftrc,0x6e
poke memory,22+pcodeoftrc,0x32
lpoke memory,23+pcodeoftrc,0xd8000b

poke memory,26+pcodeoftrc,0xe1
poke memory,27+pcodeoftrc,0x22
lpoke memory,28+pcodeoftrc,0xd8000c

poke memory,31+pcodeoftrc,0xdd
poke memory,32+pcodeoftrc,0x22
lpoke memory,33+pcodeoftrc,0xd8000f

poke memory,36+pcodeoftrc,0xfd
poke memory,37+pcodeoftrc,0x22
lpoke memory,38+pcodeoftrc,0xd80012

poke memory,41+pcodeoftrc,0xed
poke memory,42+pcodeoftrc,0x73
lpoke memory,43+pcodeoftrc,0xd80015

poke memory,46+pcodeoftrc,0xed
poke memory,47+pcodeoftrc,0x38
poke memory,48+pcodeoftrc,0xe5

poke memory,49+pcodeoftrc,0xed
poke memory,50+pcodeoftrc,0x7b
lpoke memory,51+pcodeoftrc,0xd80015

poke memory,54+pcodeoftrc,0xfd
poke memory,55+pcodeoftrc,0x2a
lpoke memory,56+pcodeoftrc,0xd80012

poke memory,59+pcodeoftrc,0xdd
poke memory,60+pcodeoftrc,0x22
lpoke memory,61+pcodeoftrc,0xd8000f

poke memory,64+pcodeoftrc,0x3a
lpoke memory,65+pcodeoftrc,0xd8000b
poke memory,68+pcodeoftrc,0xed
poke memory,69+pcodeoftrc,0x6d

poke memory,70+pcodeoftrc,0x2a
lpoke memory,71+pcodeoftrc,0xd80009
poke memory,74+pcodeoftrc,0xe5
poke memory,75+pcodeoftrc,0xf1

poke memory,76+pcodeoftrc,0x2a
lpoke memory,77+pcodeoftrc,0xd80006

poke memory,80+pcodeoftrc,0xed
poke memory,81+pcodeoftrc,0x5b
lpoke memory,82+pcodeoftrc,0xd80003

poke memory,85+pcodeoftrc,0xed
poke memory,86+pcodeoftrc,0x4b
lpoke memory,87+pcodeoftrc,0xd80000

poke memory,90+pcodeoftrc,0xc9
repeat 34910
poke memory,0+(cnt*4)+0x84,0xcd
lpoke memory,1+(cnt*4)+0x84,pcodeoftrc
loop
bootromread=0
exist bootromimg
if strsize!-1{
bload bootromimg,memory
ptr4ovwrite=0x2014c
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20320
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20330
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x204fc
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x2050c
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20514
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x2051c
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20588
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20808
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20810
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x20d8c
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x21330
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x21334
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x21338
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x21448
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x21a10
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc

/*ptr4ovwrite=0x207b4
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x207b8
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x207c0
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc
ptr4ovwrite=0x207f0
poke memory,0+ptr4ovwrite,0xcd
lpoke memory,1+ptr4ovwrite,pcodeoftrc*/

bootromread=1
}

sdim controlportpoll,256

op_stack=0xdf0000
poke memory,(0x0D00429+3)+0,peek(op_stack,0)
poke memory,(0x0D00429+3)+1,peek(op_stack,1)
poke memory,(0x0D00429+3)+2,peek(op_stack,2)

dupptr lcdiomemory,varptr(memory)+0xe30000,0x1000,2

fstmpptxp=0x290000
fdtmpptxp=0x2c0000

fdntmpptxp=0xdc0000

fstmpptxpbase=lpeek(fstmpptxp,0)
fdtmpptxpbase=lpeek(fdtmpptxp,0)
filemaxread=1024
sdim filedb_str,4096,filemaxread
dim filedb_ptr,filemaxread

dim keyseed,256*2

keyseed(8)=0x0f
keyseed(37)=0x02,0x04,0x03,0x01
keyseed(' ')=0x20
keyseed(187|256)=0x0a
keyseed(189)=0x0b
keyseed(186|256)=0x0c
keyseed(191)=0x0d
keyseed(190)=0x19
keyseed(186)=0x19
keyseed(13)=0x09
keyseed(189|256)=0x09
keyseed(226|256)=0x21
keyseed(219)=0x0c
keyseed(221)=0x0b
keyseed(222)=0x0e
keyseed(219|256)=0x1d
keyseed(221|256)=0x15
keyseed('2'|256)=0x0a
keyseed('8'|256)=0x1d,0x15
keyseed('0')=0x21,0x22,0x1a,0x12,0x23,0x1b,0x13,0x24,0x1c,0x14
keyseed('A')=0x2f,0x27,0x1f,0x2e,0x26,0x1e,0x16,0x0e,0x2d,0x25,0x1d,0x15,0x0d,0x2c,0x24,0x1c,0x14,0x0c,0x2b,0x23,0x1b,0x13,0x0b,0x2a,0x22,0x1a
keyseed('A'|256)=0x2f,0x27,0x1f,0x2e,0x26,0x1e,0x16,0x0e,0x2d,0x25,0x1d,0x15,0x0d,0x2c,0x24,0x1c,0x14,0x0c,0x2b,0x23,0x1b,0x13,0x0b,0x2a,0x22,0x1a

wpoke memory,0x00D0268A,0x7FFF

wpoke memory,0x00E30018,(4<<1)|(1<<8)

dupptr vram4check4debug,varptr(memory)+0xd40000,65536,2

makeclbkfunc clbk, 3, *RMKEARCH,1

dim memptrtmp,4096//1048576
repeat 4096:memptrtmp(cnt)=varptr(memory)+cnt*4096:loop
memaccessptrset varptr(memptrtmp),4096//16777216
//repeat 12:memptrtmp(cnt+3392)=varptr(vram48bt)+(cnt*4096):loop

setmemaccess4nonmac clbk
ez80macfuncset varptr(memaccessmod)

cpu_reset
control_reset

dupptr eZ80_reg,cpu_get_regptr(),64,2

//cpu_set_speed 48000000/60/2/2
cpu_set_speed 6000000/60

privillegedspacer=0xffffff,0xd1887c,0xd1887c,0

//onkey gosub *getkeys
oncmd gosub *getkeys_down,0x100
oncmd gosub *getkeys_up,0x101

dircmdlines=""+dir_cmdline

repeat:if strmid(dircmdlines,0,1)=" "{dircmdlines=strmid(dircmdlines,1,strlen(dircmdlines))}else{break}:loop

exist dircmdlines
strsize2=strsize
sdim img4exec,strsize2
exist dircmdlines:if strsize=-1{if bootromread=0{end}}else{
bload dircmdlines,img4exec

dupptr memory8000,varptr(memory)+0xd08000,128,2

if IsTI84PCEPrgm(img4exec)=0 | GetTI84PCEPrgmType(img4exec)!"Asm"{end}

SetTitleFromPrgm img4exec

memcpy memory,img4exec,varsize(img4exec)-76,0xD1A881,76

if bootromread=1{
poke memory,0,0xfb
//wpoke memory,1,0x7ded
lpoke memory,4,0xc3|(pointertosetinit<<8)
}
}

vramszbakxy(0)=lpeek(memory,0xe30004),lpeek(memory,0xe30000)
repeat
redraw 0
clockcount+=cpu_execute()
cpu_int 0x38
if ((vramszbakxy(0)!lpeek(memory,0xe30004)) | (vramszbakxy(1)!lpeek(memory,0xe30000))){gosub *initializevram}
vramszbakxy(0)=lpeek(memory,0xe30004),lpeek(memory,0xe30000)
gosub *cpyvramfrommem
gsel 0,0
pos 0,0
gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
redraw 1
if endflagofprogram!0{end}
await:loop
stop

*RMKEARCH
argclbkfunc argv
switch argv(2)&3
case 2
	switch argv(0)
	default
	if ((lpeek(eZ80_reg,0x34)<=privillegedspacer(0)) | (lpeek(eZ80_reg,0x34)>=privillegedspacer(1) & lpeek(eZ80_reg,0x34)>=privillegedspacer(2))){
	switch (((argv(0)&0xF000)>>12)&0xF)
	case 0x0
		switch (argv(0)&0xFF)
		case 0x00
		poke controlportpoll,argv(0)&0xFF,argv(1)&0x93
		swbreak
		case 0x01
		cpu_set_speed (6000000/60)*(1<<(argv(1)&3))
		swbreak
		case 0x05
		poke controlportpoll,argv(0)&0xFF,argv(1)&0x1f
		swbreak
		case 0x0d
		poke controlportpoll,argv(0)&0xFF,((argv(1)&0xF)<<4)|(argv(1)&0xF)
		swbreak
		case 0x0f
		poke controlportpoll,argv(0)&0xFF,argv(1)&0x3
		swbreak
		case 0x1d
		case 0x1e
		case 0x1f
		poke privillegedspacer(0),(argv(0)-0x1d)&3,argv(1)
		swbreak
		case 0x20
		case 0x21
		case 0x22
		poke privillegedspacer(1),(argv(0)-0x20)&3,argv(1)
		swbreak
		case 0x23
		case 0x24
		case 0x25
		poke privillegedspacer(2),(argv(0)-0x23)&3,argv(1)
		swbreak
		case 0x29
		poke controlportpoll,argv(0)&0xFF,argv(1)&0x1
		swbreak
		case 0x3A
		case 0x3B
		case 0x3C
		poke privillegedspacer(3),(argv(0)-0x3A)&3,argv(1)
		swbreak
		default
		poke controlportpoll,argv(0)&0xFF,argv(1)
		swbreak
		swend
	swbreak
	default
		return memaccessmod((((argv(0)&0xF000)-0x1000)<<8)|(argv(0)&0xFF),argv(1),0)
		//logmes "Unimplemented I/O Access("+strf("%04X",argv(0))+")"
	swbreak
	swend
		}else{
		cpu_nmi
		}
	swbreak
	swend
swbreak
case 3
#define __OP1Start 0x0D005F8
	switch argv(0)
	case 0xe5
		syscallnumber=(lpeek(memory,0xd8000c)&0xFFFFFF)-4
		//logmes strf("%06X",syscallnumber)
		switch syscallnumber
		case 0x0000084//_boot_GetHardwareVers
		poke memory,0xd8000a,7
		swbreak
		case 0x0000088//_boot_GetKeyID
		poke memory,0xd80006,0x1370
		swbreak
		case 0x000008C//_boot_GetBootVerMinor
		poke memory,0xd8000a,1
		swbreak
		case 0x0000090//_boot_GetBootVerBuild
		poke memory,0xd8000a,0
		poke memory,0xd80001,0
		swbreak
		case 0x000009C//__memchr
		poiter4ret=-1
		repeat peek24(memory,peek24(memory,0xd80015)+9)
		if memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,0,1)=peek24(memory,peek24(memory,0xd80015)+6){poiter4ret=cnt:break}
		loop
		if poiter4ret=-1{
		poke24 memory,0xd80006,0
		}else{
		poke24 memory,0xd80006,peek24(memory,peek24(memory,0xd80015)+3)+poiter4ret
		}
		swbreak
		case 0x00000A0//__memcmp
		ret4function=0
		repeat peek24(memory,peek24(memory,0xd80015)+9)
		ret4function+=(memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,0,1)-memaccessmod(peek24(memory,peek24(memory,0xd80015)+6)+cnt,0,1))
		loop
		poke24 memory,0xd80006,ret4function
		swbreak
		case 0x00000A4//__memcpy
		repeat peek24(memory,peek24(memory,0xd80015)+9)
		ret4function=memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,memaccessmod(peek24(memory,peek24(memory,0xd80015)+6)+cnt,0,1),0)
		loop
		poke24 memory,0xd80006,peek24(memory,peek24(memory,0xd80015)+3)+peek24(memory,peek24(memory,0xd80015)+9)
		swbreak
		case 0x00000A8//__memmove
		repeat peek24(memory,peek24(memory,0xd80015)+9)
		ret4function=memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,memaccessmod(peek24(memory,peek24(memory,0xd80015)+6)+cnt,0,1),0)
		loop
		poke24 memory,0xd80006,peek24(memory,peek24(memory,0xd80015)+3)+peek24(memory,peek24(memory,0xd80015)+9)
		swbreak
		case 0x00000AC//__memset
		repeat peek24(memory,peek24(memory,0xd80015)+9)
		ret4function=memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,peek24(memory,peek24(memory,0xd80015)+6),0)
		loop
		poke24 memory,0xd80006,peek24(memory,peek24(memory,0xd80015)+3)
		swbreak
		case 0x00000B0//__memclear
		repeat peek24(memory,peek24(memory,0xd80015)+6)
		ret4function=memaccessmod(peek24(memory,peek24(memory,0xd80015)+3)+cnt,0,0)
		loop
		poke24 memory,0xd80006,peek24(memory,peek24(memory,0xd80015)+3)
		swbreak
		case 0x00000BC//_sprintf
		stringout4func=""
		sdim string4show,65536
		string4slice="":repeat:poke string4slice,0,memaccessmod(peek24(memory,peek24(memory,0xd80015)+9)+cnt,0,1):string4show+=string4slice:if peek(string4slice,0)=0{break}:loop
			switch peek24(memory,peek24(memory,0xd80015)+3)
			case 1
			stringout4func=strf(string4show)
			swbreak
			case 2
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12))
			swbreak
			case 3
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15))
			swbreak
			case 4
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18))
			swbreak
			case 5
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21))
			swbreak
			case 6
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24))
			swbreak
			case 7
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27))
			swbreak
			case 8
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30))
			swbreak
			case 9
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33))
			swbreak
			case 10
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33),peek24(memory,peek24(memory,0xd80015)+36))
			swbreak
			case 11
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33),peek24(memory,peek24(memory,0xd80015)+36),peek24(memory,peek24(memory,0xd80015)+39))
			swbreak
			case 12
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33),peek24(memory,peek24(memory,0xd80015)+36),peek24(memory,peek24(memory,0xd80015)+39),peek24(memory,peek24(memory,0xd80015)+42))
			swbreak
			case 13
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33),peek24(memory,peek24(memory,0xd80015)+36),peek24(memory,peek24(memory,0xd80015)+39),peek24(memory,peek24(memory,0xd80015)+42),peek24(memory,peek24(memory,0xd80015)+45))
			swbreak
			default
			stringout4func=strf(string4show,peek24(memory,peek24(memory,0xd80015)+12),peek24(memory,peek24(memory,0xd80015)+15),peek24(memory,peek24(memory,0xd80015)+18),peek24(memory,peek24(memory,0xd80015)+21),peek24(memory,peek24(memory,0xd80015)+24),peek24(memory,peek24(memory,0xd80015)+27),peek24(memory,peek24(memory,0xd80015)+30),peek24(memory,peek24(memory,0xd80015)+33),peek24(memory,peek24(memory,0xd80015)+36),peek24(memory,peek24(memory,0xd80015)+39),peek24(memory,peek24(memory,0xd80015)+42),peek24(memory,peek24(memory,0xd80015)+45),peek24(memory,peek24(memory,0xd80015)+48))
			swbreak
			swend
		repeat strlen(stringout4func)
		ret4function=memaccessmod(peek24(memory,peek24(memory,0xd80015)+6)+cnt,peek(stringout4func,cnt),0)
		loop
		poke24 memory,0xd80006,strlen(stringout4func)
		swbreak
		case 0x002013C//_CpHLDE
		if (lpeek(memory,0xd80003)&0xFFFFFF)=(lpeek(memory,0xd80006)&0xFFFFFF){
			poke memory,0xd80009,peek(memory,0xd80009)|64
		}else{
			if (lpeek(memory,0xd80003)&0xFFFFFF)>=(lpeek(memory,0xd80006)&0xFFFFFF){
				poke memory,0xd80009,peek(memory,0xd80009)|1
			}else{
				poke memory,0xd80009,peek(memory,0xd80009)&((-1)-1)
			}
		}
		swbreak
		case 0x0020140//_DivHLBy10_s
		poke memory,0xd8000a,10
		case 0x0020144//_DivHLByA_s
		divby=peek(memory,0xd8000a)
		poke memory,0xd8000a,wpeek(memory,0xd80006)\divby
		wpoke memory,0xd80006,wpeek(memory,0xd80006)/divby
		swbreak
		case 0x002014C//_GetCSC
		if traccode>=1{
			switch traccode
			case 1
				poke memory,0xd8000a,0x30
			swbreak
			case 2
				poke memory,0xd8000a,0x36
			swbreak
			swend
			traccode=0
		}else{
		poke memory,0xd8000a,keycode4ret
		keycode4ret=0
		}
		swbreak
		case 0x0020320//_Mov9ToOP1
		memcpy memory,memory,9,__OP1Start,(lpeek(memory,0xd80006)&0xFFFFFF)
		swbreak
		case 0x00204FC//_MemChk
		hltmp=128*1024
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x002050C//_ChkFindSym
		fname4readwrite="":fname4readwritebase_fp4fs=""
		dupptr fname4readwritebasetype,varptr(memory)+__OP1Start,0x1000000,2
		dupptr fname4readwritebase,varptr(memory)+__OP1Start+1,0x1000000,2
		repeat 2
		if cnt=0{fname4readwritebase_fp4fs=""+dir_exe+"\\"}else{fname4readwritebase_fp4fs=""}
		if peek(fname4readwritebasetype,0)=0x06{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xp":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xp"}
		}else{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xv":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xv"}
		}
		if strsize!-1{break}
		loop

		if strsize2=-1{poke memory,0xd80009,peek(memory,0xd80009)|1}else{poke memory,0xd80009,peek(memory,0xd80009)&0xFE}

		detmp=0:hltmp=0
		if strsize2!-1{
			fileid4target=-1
			repeat fileidmaxed:if filedb_str(cnt)=fname4readwritebase{fileid4target=cnt:break}:loop
			if (fileid4target=-1){
				hltmp=(strsize2-76)
				lpoke memory,fstmpptxp,strsize2-76
				fstmpptxp+=3
				detmp=lpeek(fdtmpptxp,0)
				fdtmpptxp+=(strsize2-76)
				dupptr buffer4dataread,varptr(memory)+detmp,(strsize2-74),2
				bload fname4readwrite,buffer4dataread,(strsize2-74),72
				memcpy filedb_str(fileidmaxed),fname4readwritebase,8,0,0
				filedb_ptr(fileidmaxed)=(lpeek(detmp,0)&0xFFFFFF)|((peek(fname4readwritebasetype,0))<<24)
				fileidmaxed++
			}else{
				detmp=filedb_ptr(fileid4target)
				hltmp=(lpeek(memory,fstmpptxpbase+(3*fileid4target))&0xFFFFFF)
			}
		}

		poke memory,0xd80003+0,peek(detmp,0)
		poke memory,0xd80003+1,peek(detmp,1)
		poke memory,0xd80003+2,peek(detmp,2)
		
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0020514//_InsertMem
		detmp=(lpeek(memory,0xd80003)&0xFFFFFF)+(lpeek(memory,0xd80006)&0xFFFFFF)
		hltmp=0
		poke memory,0xd80003+0,peek(detmp,0)
		poke memory,0xd80003+1,peek(detmp,1)
		poke memory,0xd80003+2,peek(detmp,2)
		
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x002051C//_EnoughMem
		poke memory,0xd80009,peek(memory,0xd80009)&0xFE
		swbreak
		case 0x0020588//_DelVar
		fname4readwrite="":fname4readwritebase_fp4fs=""
		dupptr fname4readwritebasetype,varptr(memory)+__OP1Start,0x1000000,2
		dupptr fname4readwritebase,varptr(memory)+__OP1Start+1,0x1000000,2
		repeat 2
		if cnt=0{fname4readwritebase_fp4fs=""+dir_exe+"\\"}else{fname4readwritebase_fp4fs=""}
		if peek(fname4readwritebasetype,0)=0x06{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xp":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xp"}
		}else{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xv":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xv"}
		}
		if strsize!-1{break}
		loop
		if strsize2!-1{
			delete fname4readwrite
			fileid4target=-1
			repeat fileidmaxed:if filedb_str(cnt)=fname4readwritebase{fileid4target=cnt:break}:loop
			if (fileid4target!-1){memset filedb_str(fileid4target),0,8,0:filedb_ptr(fileid4target)=0}
		}
		swbreak
		case 0x0020590//_DelMem
		memset memory,0,(lpeek(memory,0xd80003)&0xFFFFFF),(lpeek(memory,0xd80006)&0xFFFFFF)
		poke memory,0xd80000+0,0
		poke memory,0xd80000+1,0
		poke memory,0xd80000+2,0
		swbreak
		case 0x00205BC//_PopOP5
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		memcpy memory,memory,11,0x0D00624,op_stack
		op_stack+=11
		op_stack&=0xFFFFFF
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x00205C0//_PopOP3
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		memcpy memory,memory,11,0x0D0060E,op_stack
		op_stack+=11
		op_stack&=0xFFFFFF
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x00205C4//_PopOP1
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		memcpy memory,memory,11,0x0D005F8,op_stack
		op_stack+=11
		op_stack&=0xFFFFFF
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x002061C//_PushOP5
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		op_stack-=11
		op_stack&=0xFFFFFF
		memcpy memory,memory,11,op_stack,0x0D00624
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x0020620//_PushOP3
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		op_stack-=11
		op_stack&=0xFFFFFF
		memcpy memory,memory,11,op_stack,0x0D0060E
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x0020628//_PushOP1
		op_stack=(lpeek(memory,(0x0D00429+3))&0xFFFFFF)
		op_stack-=11
		op_stack&=0xFFFFFF
		memcpy memory,memory,11,op_stack,0x0D005F8
		poke memory,(0x0D00429+3)+0,peek(op_stack,0)
		poke memory,(0x0D00429+3)+1,peek(op_stack,1)
		poke memory,(0x0D00429+3)+2,peek(op_stack,2)
		swbreak
		case 0x00207B4//_PutMap
		gosub *cpyvramfrommem
		gselbak=ginfo(3)
		gsel 1,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf peek(memory,0xD00596)*12,peek(memory,0xD00595)*24,(peek(memory,0xD00596)+1)*12,(peek(memory,0xD00595)+1)*24
		vraminfo=vramformattrans(wpeek(memory,0x0D02688))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		pos peek(memory,0xD00596)*12,peek(memory,0xD00595)*24
		message4showtmp="":poke message4showtmp,0,peek(memory,0xd8000a)
		switch peek(message4showtmp,0)
		case 0x0a
		poke memory,0xD00595,peek(memory,0xD00595)+1
		swbreak
		case 0x0d
		poke memory,0xD00596,0
		swbreak
		default
		mes message4showtmp,1
		swbreak
		swend
		if (ginfo(22)/12)>=25{
		poke memory,0xD00596,0
		poke memory,0xD00595,(ginfo(23)/24)+1
		}else{
		poke memory,0xD00596,(ginfo(22)/12)+1
		poke memory,0xD00595,ginfo(23)/24
		}
		if peek(memory,0xD00595)>=10{
		pos 0,0:gzoom 320,216,1,0,24,320,216,0:poke memory,0xD00595,9:poke memory,0xD00596,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf 0,216,320,240
		}
		gsel gselbak,0
		gosub *cpyvramtomem
		redraw 0
		gsel 0,0
		pos 0,0
		gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
		redraw 1
		swbreak
		case 0x00207B8//_PutC
		gosub *cpyvramfrommem
		gselbak=ginfo(3)
		gsel 1,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf peek(memory,0xD00596)*12,peek(memory,0xD00595)*24,(peek(memory,0xD00596)+1)*12,(peek(memory,0xD00595)+1)*24
		vraminfo=vramformattrans(wpeek(memory,0x0D02688))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		pos peek(memory,0xD00596)*12,peek(memory,0xD00595)*24
		message4showtmp="":poke message4showtmp,0,peek(memory,0xd8000a)
		mes message4showtmp,1
		if (ginfo(22)/12)>=25{
		poke memory,0xD00596,0
		poke memory,0xD00595,(ginfo(23)/24)+1
		}else{
		poke memory,0xD00596,(ginfo(22)/12)+1
		poke memory,0xD00595,ginfo(23)/24
		}
		if peek(memory,0xD00595)>=10{
		pos 0,0:gzoom 320,216,1,0,24,320,216,0:poke memory,0xD00595,9:poke memory,0xD00596,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf 0,216,320,240
		}
		gsel gselbak,0
		gosub *cpyvramtomem
		redraw 0
		gsel 0,0
		pos 0,0
		gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
		redraw 1
		swbreak
		case 0x00207C0//_PutS
		gosub *cpyvramfrommem
		gselbak=ginfo(3)
		gsel 1,0
		dupptr message4show,varptr(memory)+(lpeek(memory,0xd80006)&0xFFFFFF),0x1000000,2
		pos peek(memory,0xD00596)*12,peek(memory,0xD00595)*24
		message4showtmp=""
		repeat
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf (peek(memory,0xD00596)+0)*12,(peek(memory,0xD00595)+0)*24,(peek(memory,0xD00596)+1)*12,(peek(memory,0xD00595)+1)*24
		vraminfo=vramformattrans(wpeek(memory,0x0D02688))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		poke message4showtmp,0,peek(message4show,cnt)
		pos (peek(memory,0xD00596))*12,(peek(memory,0xD00595))*24
		if peek(message4showtmp,0)=0{break}
		mes message4showtmp,1
		poke memory,0xD00596,(ginfo(22)/12)+1
		poke memory,0xD00595,ginfo(23)/24
		if (ginfo(22)/12)>=25{
		poke memory,0xD00596,0
		poke memory,0xD00595,(ginfo(23)/24)+1
		}else{
		poke memory,0xD00596,(ginfo(22)/12)+1
		poke memory,0xD00595,ginfo(23)/24
		}
		if peek(memory,0xD00595)>=10{
		pos 0,0:gzoom 320,216,1,0,24,320,216,0:poke memory,0xD00595,9:poke memory,0xD00596,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf 0,216,320,240
		}
		loop
		gsel gselbak,0
		gosub *cpyvramtomem
		redraw 0
		gsel 0,0
		pos 0,0
		gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
		redraw 1
		swbreak
		case 0x00207F0//_NewLine
		gosub *cpyvramfrommem
		gselbak=ginfo(3)
		gsel 1,0
		poke memory,0xD00596,0
		poke memory,0xD00595,(ginfo(23)/24)+1
		if peek(memory,0xD00595)>=10{
		pos 0,0:gzoom 320,216,1,0,24,320,216,0:poke memory,0xD00595,9:poke memory,0xD00596,0
		vraminfo=vramformattrans(wpeek(memory,0x0D0268A))
		color ((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8
		boxf 0,216,320,240
		}
		gsel gselbak,0
		gosub *cpyvramtomem
		redraw 0
		gsel 0,0
		pos 0,0
		gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
		redraw 1
		swbreak
		case 0x0021A10//_ClrLCDAll
		case 0x0020808//_ClrLCDFull
		case 0x0020810//_ClrScrnFull
		gselbak=ginfo(3)
		gsel 1,0
		cls 0
		poke memory,0xD00596,0
		poke memory,0xD00595,0
		gsel gselbak,0
		gosub *cpyvramtomem
		redraw 0
		gsel 0,0
		pos 0,0
		gzoom ginfo(12),ginfo(13),1,0,0,320,240,0
		redraw 1
		swbreak
		case 0x0020828//_homeup
		swbreak
		case 0x0020D8C//_GetKey
		repeat:if (pressedkey=1){break}:await:loop
		poke memory,0xd8000a,keycode4ret
		pressedkey=0
		keycode4ret=0
		swbreak
		case 0x00210DC//MemClear
		poke memory,0xd8000a,0
		case 0x00210E0//_MemSet
		memset memory,peek(memory,0xd8000a),(lpeek(memory,0xd80000)&0xFFFFFF),(lpeek(memory,0xd80006)&0xFFFFFF)
		hltmp=(lpeek(memory,0xd80006)&0xFFFFFF)+(lpeek(memory,0xd80000)&0xFFFFFF)
		detmp=hltmp+1
		poke memory,0xd80000+0,0
		poke memory,0xd80000+1,0
		poke memory,0xd80000+2,0
		
		poke memory,0xd80003+0,peek(detmp,0)
		poke memory,0xd80003+1,peek(detmp,1)
		poke memory,0xd80003+2,peek(detmp,2)
		
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0021434//_DelVarArc
		fname4readwrite="":fname4readwritebase_fp4fs=""
		dupptr fname4readwritebasetype,varptr(memory)+__OP1Start,9,2
		dupptr fname4readwritebase,varptr(memory)+__OP1Start+1,8,2
		repeat 2
		if cnt=0{fname4readwritebase_fp4fs=""+dir_exe+"\\"}else{fname4readwritebase_fp4fs=""}
		if peek(fname4readwritebasetype,0)=0x06{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xp":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xp"}
		}else{
			exist fname4readwritebase_fp4fs+fname4readwritebase+".8xv":strsize2=strsize:if strsize2!-1{fname4readwrite=fname4readwritebase_fp4fs+fname4readwritebase+".8xv"}
		}
		if strsize!-1{break}
		loop
		if strsize2!-1{
			delete fname4readwrite
			fileid4target=-1
			repeat fileidmaxed:if filedb_str(cnt)=fname4readwritebase{fileid4target=cnt:break}:loop
			if (fileid4target!-1){memset filedb_str(fileid4target),0,8,0:filedb_ptr(fileid4target)=0}
		}
		swbreak
		case 0x0021AE8//_SetTextBGcolor
		wpoke memory,0x00D0268A,(lpeek(memory,0xd80006)&0xFFFFFF)
		swbreak
		case 0x0021D48//_ChkBCIs0
		if (lpeek(memory,0xd80000)&0xFFFFFF)=0{
		poke memory,0xd80009,peek(memory,0xd80009)|64
		}else{
		poke memory,0xd80009,peek(memory,0xd80009)&((-1)-64)
		}
		poke memory,0xd8000a,peek(memory,0xd80002)
		swbreak
		case 0x0021D4C//_ChkDEIs0
		if (lpeek(memory,0xd80003)&0xFFFFFF)=0{
		poke memory,0xd80009,peek(memory,0xd80009)|64
		}else{
		poke memory,0xd80009,peek(memory,0xd80009)&((-1)-64)
		}
		poke memory,0xd8000a,peek(memory,0xd80005)
		swbreak
		case 0x0021D50//_ChkHLIs0
		if (lpeek(memory,0xd80006)&0xFFFFFF)=0{
		poke memory,0xd80009,peek(memory,0xd80009)|64
		}else{
		poke memory,0xd80009,peek(memory,0xd80009)&((-1)-64)
		}
		poke memory,0xd8000a,peek(memory,0xd80008)
		swbreak
		case 0x0021D54//_SetAToBCU
		poke memory,0xd80002,peek(memory,0xd8000a)
		swbreak
		case 0x0021D58//_SetAToDEU
		poke memory,0xd80005,peek(memory,0xd8000a)
		swbreak
		case 0x0021D5C//_SetAToHLU
		poke memory,0xd80008,peek(memory,0xd8000a)
		swbreak
		case 0x0021D60//_SetBCUToA
		poke memory,0xd8000a,peek(memory,0xd80002)
		swbreak
		case 0x0021D64//_SetBCUToB
		poke memory,0xd80001,peek(memory,0xd80002)
		swbreak
		case 0x0021D68//_SetDEUToA
		poke memory,0xd8000a,peek(memory,0xd80005)
		swbreak
		case 0x0021D6C//_SetDEUToB
		poke memory,0xd80001,peek(memory,0xd80005)
		swbreak
		case 0x0021D70//_SetHLUToA
		poke memory,0xd8000a,peek(memory,0xd80008)
		swbreak
		case 0x0021D74//_SetHLUToB
		poke memory,0xd80001,peek(memory,0xd80008)
		swbreak
		case 0x0021D78//_SignExtendBC
		signextendtmp=wpeek(memory,0xd80000)
		if (signextendtmp&0x8000){poke signextendtmp,2,0xff}
		poke memory,0xd80000+0,peek(signextendtmp,0)
		poke memory,0xd80000+1,peek(signextendtmp,1)
		poke memory,0xd80000+2,peek(signextendtmp,2)
		swbreak
		case 0x0021D7C//_SignExtendDE
		signextendtmp=wpeek(memory,0xd80003)
		if (signextendtmp&0x8000){poke signextendtmp,2,0xff}
		poke memory,0xd80003+0,peek(signextendtmp,0)
		poke memory,0xd80003+1,peek(signextendtmp,1)
		poke memory,0xd80003+2,peek(signextendtmp,2)
		swbreak
		case 0x0021D80//_SignExtendHL
		signextendtmp=wpeek(memory,0xd80006)
		if (signextendtmp&0x8000){poke signextendtmp,2,0xff}
		poke memory,0xd80006+0,peek(signextendtmp,0)
		poke memory,0xd80006+1,peek(signextendtmp,1)
		poke memory,0xd80006+2,peek(signextendtmp,2)
		swbreak
		case 0x0021D90//_DivHLByA
		divby=peek(memory,0xd8000a)
		hltmp=(lpeek(memory,0xd80006)&0xFFFFFF)/divby
		poke memory,0xd8000a,(lpeek(memory,0xd80006)&0xFFFFFF)\divby
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0021E20//_os_SetDrawBGColor
		wpoke memory,0x0D026AA,(lpeek(memory,0xd80006)&0xFFFFFF)
		swbreak
		case 0x0021E24//_os_SetDrawFGColor
		wpoke memory,0x0D026AC,(lpeek(memory,0xd80006)&0xFFFFFF)
		swbreak
		case 0x0021EE4//_os_GetDrawBGColor_BROKEN
		hltmp=(lpeek(memory,0x0D026AA)&0xFFFFFF)
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0021EE8//_os_GetDrawFGColor
		hltmp=(lpeek(memory,0x0D026AC)&0xFFFFFF)
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0021F98//_ChkInRam
		if (lpeek(memory,0xd80003)&0xFFFFFF)>=0xd00000{
		poke memory,0xd80009,peek(memory,0xd80009)|64
		}else{
		poke memory,0xd80009,peek(memory,0xd80009)&((-1)-64)
		}
		swbreak
		case 0x0021330//_CreateAppVar
		case 0x0021334//_CreateProtProg
		case 0x0021338//_CreateVar
		hltmp=__OP1Start
		lpoke memory,fstmpptxp,(lpeek(memory,0xd80006)&0xFFFFFF)
		fstmpptxp+=3
		detmp=lpeek(fdtmpptxp,0)
		fdtmpptxp+=(lpeek(memory,0xd80006)&0xFFFFFF)+2
		fileidmaxed++
		
		poke memory,0xd80003+0,peek(detmp,0)
		poke memory,0xd80003+1,peek(detmp,1)
		poke memory,0xd80003+2,peek(detmp,2)
		
		poke memory,0xd80006+0,peek(hltmp,0)
		poke memory,0xd80006+1,peek(hltmp,1)
		poke memory,0xd80006+2,peek(hltmp,2)
		swbreak
		case 0x0021448//_Arc_Unarc
		dupptr dataname,varptr(memory)+__OP1Start+1,8,2
		datasize=(lpeek(memory,0xD0257B)&0xFFFFFF)//(lpeek(memory,0xd80006)&0xFFFFFF)
		if (lpeek(memory,0xd80003)&0xFFFFFF)>=0xd00000{
		sdim data4created,datasize+78
		sdim data4created,0x4a+datasize+2
		wpoke data4created,0,0x2a2a
		lpoke data4created,2,0x33384954
		poke data4created,6,0x46
		lpoke data4created,7,0x000a1a2a
		poke data4created,11,'A'
		wpoke data4created,0x35,0x13+datasize
		poke data4created,0x37,0x0d
		wpoke data4created,0x39,datasize+2
		poke data4created,0x3b,peek(memory,__OP1Start)
		memcpy data4created,dataname,strlen(dataname),0x3c,0
		poke data4created,0x45,0x80
		wpoke data4created,0x46,wpeek(data4created,0x39)
		wpoke data4created,0x48,wpeek(data4created,0x39)-2
		memcpy data4created,memory,wpeek(data4created,0x39),0x4a,(lpeek(memory,0xd80003)&0xFFFFFF)+2
		setcs4dsv data4created
		dupptr fname4readwritebase,varptr(memory)+__OP1Start+1,8,2
		bsave fname4readwritebase+".8xv",data4created
		memcpy memory,memory,datasize+2,fdtmpptxp,(lpeek(memory,0xd80003)&0xFFFFFF)
		fileid4target=-1
		repeat fileidmaxed:if filedb_str(cnt)=dataname{fileid4target=cnt:break}:loop
		if (fileid4target!-1){filedb_ptr(fileid4target)=((filedb_ptr(fileid4target)&0xFF000000)|(fdtmpptxp&0xFFFFFF))}
		fdtmpptxp+=datasize+2
		}else{
		memcpy memory,memory,datasize+2,fdntmpptxp,(lpeek(memory,0xd80003)&0xFFFFFF)
		fileid4target=-1
		repeat fileidmaxed:if filedb_str(cnt)=dataname{fileid4target=cnt:break}:loop
		if (fileid4target!-1){filedb_ptr(fileid4target)=((filedb_ptr(fileid4target)&0xFF000000)|(fdntmpptxp&0xFFFFFF))}
		fdntmpptxp+=datasize+2
		}
		swbreak
		default
		logmes "Unimplemented syscall("+strf("%06X",syscallnumber)+") occurred"
		swbreak
		swend
	swbreak
	case 0xe6
		//end
		endflagofprogram=1
	swbreak
	default
	if ((lpeek(eZ80_reg,0x34)<=privillegedspacer(0)) | (lpeek(eZ80_reg,0x34)>=privillegedspacer(1) & lpeek(eZ80_reg,0x34)>=privillegedspacer(2))){
	switch (((argv(0)&0xF000)>>12)&0xF)
	case 0x0
		switch (argv(0)&0xFF)
		case 0x03
		return 0
		swbreak
		case 0x08
		return 0x7f
		swbreak
		case 0x1c
		return 0x80
		swbreak
		case 0x1d
		case 0x1e
		case 0x1f
		return peek(privillegedspacer(0),(argv(0)-0x1d)&3)
		swbreak
		case 0x20
		case 0x21
		case 0x22
		return peek(privillegedspacer(1),(argv(0)-0x20)&3)
		swbreak
		case 0x23
		case 0x24
		case 0x25
		return peek(privillegedspacer(2),(argv(0)-0x23)&3)
		swbreak
		case 0x3A
		case 0x3B
		case 0x3C
		return peek(privillegedspacer(3),(argv(0)-0x3A)&3)
		swbreak
		default
		return peek(controlportpoll,argv(0)&0xFF)
		swbreak
		swend
	swbreak
	default
		return memaccessmod((((argv(0)&0xF000)-0x1000)<<8)|(argv(0)&0xFF),argv(1),1)
	//logmes "Unimplemented I/O Access("+strf("%04X",argv(0))+")"
	swbreak
	swend
	}else{
	return 0x00
	}
	swbreak
	swend
swbreak
swend
return 0

*cpyvramfrommem
//cpu_int rnd(256)
lcdbitlength=((wpeek(memory,0xe30018)>>1)&7)
switch lcdbitlength
case 3
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
memcpy vram_8bit,memory,((lpeek(memory,0xe30004)&0x3FF)+1),((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt)*((lpeek(memory,0xe30004)&0x3FF)+1),(cnt*((lpeek(memory,0xe30004)&0x3FF)+1))+(lpeek(memory,0xE30010)&0xFFFFFF)
loop
gselbackup4cpyvram=ginfo(3)
gsel 2,0
repeat 256:vraminfo=vramformattrans(wpeek(memory,0xe30200+(cnt*2))):palette cnt,((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8,cnt=255:loop
gsel 1,0
pos 0,0
gzoom ((lpeek(memory,0xe30004)&0x3FF)+1),((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16),2,0,0,((lpeek(memory,0xe30004)&0x3FF)+1),((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16),0
gsel gselbackup4cpyvram,0
//gosub *cpyvramtomem_16
gsel gselbackup4cpyvram,0
return
swbreak
case 4
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans(wpeek(memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2)))
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0,((vraminfo>>(5*2))&31)*8
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1,((vraminfo>>(5*1))&31)*8
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2,((vraminfo>>(5*0))&31)*8
loop
loop
return
swbreak
case 6
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans(wpeek(memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2)))
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0,((vraminfo>>((5*2)+1))&31)*8
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1,((vraminfo>>(5*1))&63)*4
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2,((vraminfo>>(5*0))&31)*8
loop
loop
return
swbreak
case 7
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans(wpeek(memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2)))
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0,((vraminfo>>(4*2))&15)*16
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1,((vraminfo>>(4*1))&15)*16
poke vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2,((vraminfo>>(4*0))&15)*16
loop
loop
return
swbreak
swend
return
*cpyvramfrommem_16
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
cnt2=cnt
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
vraminfo=vramformattrans(wpeek(memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)))*2)))
poke vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+0,((vraminfo>>(5*2))&31)*8
poke vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+1,((vraminfo>>(5*1))&31)*8
poke vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+2,((vraminfo>>(5*0))&31)*8
loop
loop
return

*cpyvramtomem
lcdbitlength=((wpeek(memory,0xe30018)>>1)&7)
switch lcdbitlength
case 3
gselbackup4cpyvram=ginfo(3)
gsel 2,0
repeat 256:vraminfo=vramformattrans(wpeek(memory,0xe30200+(cnt*2))):palette cnt,((vraminfo>>(5*0))&31)*8,((vraminfo>>(5*1))&31)*8,((vraminfo>>(5*2))&31)*8,cnt=255:loop
pos 0,0
gzoom (lpeek(memory,0xe30004)&0x3FF)+1,(((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16,1,0,0,(lpeek(memory,0xe30004)&0x3FF)+1,(((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16,0
gsel gselbackup4cpyvram,0
//gosub *cpyvramfrommem_16
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
memcpy memory,vram_8bit,((lpeek(memory,0xe30004)&0x3FF)+1),(cnt*((lpeek(memory,0xe30004)&0x3FF)+1))+(lpeek(memory,0xE30010)&0xFFFFFF),((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt)*((lpeek(memory,0xe30004)&0x3FF)+1)
loop
gsel gselbackup4cpyvram,0
return
swbreak
case 4
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans((((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0)/8)&31)<<(5*2))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1)/8)&31)<<(5*1))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2)/8)&31)<<(5*0)))
wpoke memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2),vraminfo
loop
loop
return
swbreak
case 6
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans((((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0)/8)&31)<<((5*2)+1))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1)/4)&63)<<(5*1))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2)/8)&31)<<(5*0)))
wpoke memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2),vraminfo
loop
loop
return
swbreak
case 7
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
cnt2=cnt
//cnt2=0
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
vraminfo=vramformattrans((((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+0)/16)&15)<<(4*2))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+1)/16)&15)<<(4*1))|(((peek(vram,(((((((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)-1)-cnt2)*((lpeek(memory,0xe30004)&0x3FF)+1))+(cnt))*3)+2)/16)&15)<<(4*0)))
wpoke memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*((lpeek(memory,0xe30004)&0x3FF)+1)))*2),vraminfo
loop
loop
return
swbreak
swend
return
*cpyvramtomem_16
repeat ((lpeek(memory,0xe30004)&0x3FF)+1)
cnt2=cnt
repeat ((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16)
vraminfo=vramformattrans(((((peek(vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+0)/8)&31)<<(5*2))|(((peek(vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+1)/8)&31)<<(5*1))|(((peek(vram,(((((((lpeek(memory,0xe30004)&0x3FF)+1)-1)-cnt2)*((((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16))+(cnt))*3)+2)/8)&31)<<(5*0))))
wpoke memory,(lpeek(memory,0xE30010)&0xFFFFFF)+((cnt+(cnt2*240))*2),vraminfo
loop
loop
return

//*getkeys
*getkeys_down
wparam2x=wparam:if wparam2x=16{shifted=1}else{pressedkey=1
keycode4ret=keyseed(wparam2x|((shifted!0)*256))
if (wparam2x>='A' & wparam2x<='Z') | (shifted!0 & (wparam2x=189 | wparam2x=226)) | (shifted=0 & (wparam2x=186)){traccode=1}
if (wparam2x=219 | wparam2x=221){traccode=2}
}
return

*getkeys_up
wparam4kup=wparam
if wparam4kup=16{
shifted=0
}
return

*initializevram
buffer 1,((lpeek(memory,0xe30004)&0x3FF)+1),(((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16
cls 0
mref vram,66
buffer 2,((lpeek(memory,0xe30004)&0x3FF)+1),(((lpeek(memory,0xe30000)&0xFF)>>2)+1)*16,1
cls 0
mref vram_8bit,66
gsel 0,0
return